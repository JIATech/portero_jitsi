---
import Layout from '../layouts/Layout.astro';
import CallModal from '../components/CallModal';

// Verificar autenticación en el lado del servidor
// En una implementación completa, deberíamos manejar sesiones del lado del servidor
---

<Layout title="Vista Departamento" useJitsi={true}>
  <div class="min-h-screen bg-gray-50">
    <header class="bg-white shadow">
      <div class="max-w-7xl mx-auto px-4 py-3 flex justify-between items-center">
        <h1 class="text-xl font-bold text-gray-900">
          Panel de Departamento
          <span id="dept-name" class="ml-2 text-sm font-normal text-gray-500"></span>
        </h1>
        <button
          id="logout-button"
          class="btn btn-secondary"
        >
          Cerrar sesión
        </button>
      </div>
    </header>

    <main class="container p-4 mx-auto">
      <!-- Modal de Llamada -->
      <div id="call-modal-container"></div>
      
      <div class="max-w-7xl mx-auto px-4 py-6">
        <div class="grid grid-cols-1 gap-6">
          <!-- Panel de estado -->
          <div class="card">
            <h3 style="font-size: 1.125rem; font-weight: 500; color: var(--color-gray-900); margin-bottom: 1rem;">
              Estado del Departamento
            </h3>
            
            <div style="margin-top: 1rem;">
              <div style="display: flex; flex-direction: column; gap: 1rem;">
                <!-- Estado actual -->
                <div class="form-group">
                  <label class="form-label">
                    Estado actual
                  </label>
                  <div class="mt-1">
                    <select 
                      id="status-select"
                      class="form-input"
                    >
                      <option value="Available">Disponible</option>
                      <option value="Busy">Ocupado</option>
                      <option value="Away">Ausente</option>
                    </select>
                  </div>
                </div>

                <!-- Actualizar perfil -->
                <div style="margin-top: 1.5rem;">
                  <h4 style="font-size: 1rem; font-weight: 500; color: var(--color-gray-700); margin-bottom: 0.75rem;">Actualizar Perfil</h4>
                  <div style="display: flex; flex-direction: column; gap: 1rem;">
                    <div class="form-group">
                      <label for="new-name" class="form-label">
                        Nuevo nombre
                      </label>
                      <input
                        type="text"
                        id="new-name"
                        class="form-input"
                        placeholder="Cambia el nombre de departamento"
                      />
                    </div>
                    <div class="form-group">
                      <label for="current-password" class="form-label">
                        Contraseña actual
                      </label>
                      <input
                        type="password"
                        id="current-password"
                        class="form-input"
                        placeholder="Ingresa tu contraseña actual"
                      />
                    </div>
                    <div class="form-group">
                      <label for="new-password" class="form-label">
                        Nueva contraseña
                      </label>
                      <input
                        type="password"
                        id="new-password"
                        class="form-input"
                        placeholder="Deja en blanco para no cambiar"
                      />
                    </div>
                    <button
                      id="update-profile-btn"
                      class="btn btn-primary"
                      type="button"
                    >
                      Actualizar perfil
                    </button>
                    <div id="profile-error" class="alert alert-error hidden"></div>
                    <div id="profile-success" class="alert alert-success hidden"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script>
  import { connectWebSocket, joinRoom, onDepartmentUpdate } from '../services/websocket-client';
  import { initCallService, addIncomingCallListener, addCallEndedListener, acceptCall, rejectCall } from '../services/call-service';
  
  document.addEventListener('DOMContentLoaded', async () => {
    // Verificar que hay una sesión activa
    const userType = localStorage.getItem('userType');
    const departmentId = localStorage.getItem('departmentId');
    const departmentName = localStorage.getItem('departmentName');
    
    if (userType !== 'departamento' || !departmentId || !departmentName) {
      // Redireccionar si no hay sesión válida
      window.location.href = '/';
      return;
    }
    
    // Mostrar nombre del departamento
    const deptNameEl = document.getElementById('dept-name');
    if (deptNameEl) {
      deptNameEl.textContent = departmentName;
    }
    
    // Cerrar sesión
    document.getElementById('logout-button')?.addEventListener('click', () => {
      localStorage.removeItem('userType');
      localStorage.removeItem('departmentId');
      localStorage.removeItem('departmentName');
      window.location.href = '/';
    });

    // Cargar datos del departamento
    try {
      const response = await fetch(`/api/departments/${departmentId}`);
      if (!response.ok) {
        throw new Error('Error al cargar datos del departamento');
      }
      
      const departmentData = await response.json();
      
      // Actualizar selector de estado
      const statusSelect = document.getElementById('status-select') as HTMLSelectElement;
      
      if (statusSelect && departmentData.status) {
        statusSelect.value = departmentData.status;
      }
    } catch (error) {
      console.error('Error al cargar datos:', error);
    }
    
    // Manejar cambio de estado
    const statusSelect = document.getElementById('status-select') as HTMLSelectElement;
    statusSelect?.addEventListener('change', async () => {
      try {
        const newStatus = statusSelect.value;
        
        if (!newStatus) return;
        
        const response = await fetch(`/api/departments/${departmentId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status: newStatus })
        });
        
        if (!response.ok) {
          throw new Error('Error al actualizar estado');
        }
        
        console.log('Estado actualizado a:', newStatus);
      } catch (error) {
        console.error('Error al actualizar estado:', error);
      }
    });
    
    // Manejar actualización de perfil
    const updateProfileBtn = document.getElementById('update-profile-btn');
    const newNameInput = document.getElementById('new-name') as HTMLInputElement;
    const currentPasswordInput = document.getElementById('current-password') as HTMLInputElement;
    const newPasswordInput = document.getElementById('new-password') as HTMLInputElement;
    const profileError = document.getElementById('profile-error');
    const profileSuccess = document.getElementById('profile-success');
    
    updateProfileBtn?.addEventListener('click', async () => {
      try {
        // Ocultar mensajes previos
        profileError?.classList.add('hidden');
        profileSuccess?.classList.add('hidden');
        
        const newName = newNameInput?.value.trim();
        const currentPassword = currentPasswordInput?.value;
        const newPassword = newPasswordInput?.value;
        
        if (!currentPassword) {
          if (profileError) {
            profileError.textContent = 'Debes ingresar tu contraseña actual';
            profileError.classList.remove('hidden');
          }
          return;
        }
        
        // Si no hay cambios, no hacer nada
        if (!newName && !newPassword) {
          if (profileError) {
            profileError.textContent = 'No hay cambios para guardar';
            profileError.classList.remove('hidden');
          }
          return;
        }
        
        const response = await fetch(`/api/departments/${departmentId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name: newName || undefined,
            currentPassword,
            newPassword: newPassword || undefined
          })
        });
        
        const responseData = await response.json();
        
        if (!response.ok) {
          if (profileError) {
            profileError.textContent = responseData.error || 'Error al actualizar perfil';
            profileError.classList.remove('hidden');
          }
          return;
        }
        
        // Actualizar datos locales si cambió el nombre
        if (newName) {
          localStorage.setItem('departmentName', newName);
          if (deptNameEl) {
            deptNameEl.textContent = newName;
          }
        }
        
        // Limpiar formulario
        newNameInput.value = '';
        currentPasswordInput.value = '';
        newPasswordInput.value = '';
        
        // Mostrar mensaje de éxito
        if (profileSuccess) {
          profileSuccess.textContent = 'Perfil actualizado con éxito';
          profileSuccess.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error:', error);
        if (profileError) {
          profileError.textContent = 'Error de comunicación con el servidor';
          profileError.classList.remove('hidden');
        }
      }
    });
    
    // Inicializar WebSocket y servicio de llamadas
    try {
      // Obtener el ID del departamento desde localStorage
      const departmentId = localStorage.getItem('departmentId');
      const departmentName = localStorage.getItem('departmentName');
      
      if (!departmentId) {
        console.error('No se encontró el ID del departamento en la sesión');
        return;
      }
      
      // Conectar WebSocket y servicio de llamadas
      const deptId = parseInt(departmentId);
      const socket = connectWebSocket();
      joinRoom('department', deptId);
      initCallService('department', deptId);
      
      // Crear contenedor para el modal de llamada
      const callModalContainer = document.getElementById('call-modal-container');
      let callModalActive = false;
      let currentCallRoom = '';
      let callerName = '';
      
      // Escuchar actualizaciones de departamento
      const unsubscribeDeptUpdate = onDepartmentUpdate((update) => {
        console.log('Actualización del departamento recibida:', update);
        
        // Actualizar UI si la actualización es para este departamento
        if (update.id === deptId) {
          // Actualizar el nombre si cambió
          if (update.name) {
            const nameElement = document.getElementById('department-name');
            if (nameElement) nameElement.textContent = update.name;
            localStorage.setItem('departmentName', update.name);
          }
          
          // Actualizar el estado si cambió
          if (update.status) {
            const statusSelect = document.getElementById('status-select') as HTMLSelectElement;
            if (statusSelect) statusSelect.value = update.status;
          }
        }
      });
      
      // Escuchar llamadas entrantes
      const unsubscribeIncomingCall = addIncomingCallListener((from, roomName, targetDeptId) => {
        console.log('Llamada entrante:', from, roomName, targetDeptId);
        
        if (targetDeptId === deptId && !callModalActive) {
          callerName = from;
          currentCallRoom = roomName;
          callModalActive = true;
          
          // Renderizar el modal de llamada entrante
          if (callModalContainer) {
            callModalContainer.innerHTML = `
              <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg shadow-lg p-6 w-96">
                  <h3 class="text-lg font-bold mb-4">Llamada entrante de ${from}</h3>
                  <p class="mb-4">Estás recibiendo una llamada del portero.</p>
                  <div class="flex justify-between">
                    <button id="reject-call-btn" class="btn btn-danger">Rechazar</button>
                    <button id="accept-call-btn" class="btn btn-success">Contestar</button>
                  </div>
                </div>
              </div>
            `;
            
            // Agregar event listeners a los botones
            document.getElementById('accept-call-btn')?.addEventListener('click', () => {
              acceptCall();
              showActiveCall();
            });
            
            document.getElementById('reject-call-btn')?.addEventListener('click', async () => {
              await rejectCall();
              hideCallModal();
            });
          }
        }
      });
      
      // Escuchar fin de llamadas
      const unsubscribeCallEnded = addCallEndedListener((roomName) => {
        console.log('Llamada finalizada:', roomName);
        
        if (currentCallRoom === roomName && callModalActive) {
          hideCallModal();
        }
      });
      
      // Función para mostrar la llamada activa
      function showActiveCall() {
        if (callModalContainer && departmentName) {
          callModalContainer.innerHTML = `
            <div class="fixed inset-0 bg-black bg-opacity-80 z-50 flex flex-col">
              <div class="bg-primary text-white p-4 flex justify-between items-center">
                <h3 class="text-lg font-bold">Llamada con ${callerName}</h3>
                <button id="end-call-btn" class="btn btn-danger">Finalizar</button>
              </div>
              <div class="flex-grow" id="jitsi-container"></div>
            </div>
          `;
          
          // Agregar event listener al botón de finalizar
          document.getElementById('end-call-btn')?.addEventListener('click', async () => {
            try {
              await fetch('/api/call/end', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ roomName: currentCallRoom })
              });
              hideCallModal();
            } catch (error) {
              console.error('Error al finalizar llamada:', error);
            }
          });
          
          // Inicializar Jitsi Meet
          const domain = 'meet.jit.si';
          const options = {
            roomName: currentCallRoom,
            width: '100%',
            height: '100%',
            parentNode: document.getElementById('jitsi-container'),
            userInfo: {
              displayName: departmentName
            },
            configOverwrite: {
              prejoinPageEnabled: false,
              startWithAudioMuted: false,
              startWithVideoMuted: false
            },
            interfaceConfigOverwrite: {
              TOOLBAR_BUTTONS: [
                'microphone', 'camera', 'fullscreen', 'chat'
              ],
              DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,
              SHOW_JITSI_WATERMARK: false
            }
          };
          
          // Crear API de Jitsi Meet
          try {
            // @ts-ignore - La librería de Jitsi se carga desde CDN
            const api = new JitsiMeetExternalAPI(domain, options);
            
            // Guardar referencia para poder destruirla después
            (window as any).jitsiApi = api;
            
            // Manejar eventos
            api.on('videoConferenceLeft', () => {
              hideCallModal();
            });
          } catch (error) {
            console.error('Error al inicializar Jitsi Meet:', error);
            hideCallModal();
          }
        }
      }
      
      // Función para ocultar el modal de llamada
      function hideCallModal() {
        if (callModalContainer) {
          callModalContainer.innerHTML = '';
          callModalActive = false;
          currentCallRoom = '';
          callerName = '';
          
          // Destruir API de Jitsi si existe
          if ((window as any).jitsiApi) {
            try {
              (window as any).jitsiApi.dispose();
              (window as any).jitsiApi = null;
            } catch (error) {
              console.error('Error al destruir API de Jitsi:', error);
            }
          }
        }
      }
      
      // Limpiar recursos cuando se destruye el componente
      window.addEventListener('beforeunload', () => {
        unsubscribeDeptUpdate();
        unsubscribeIncomingCall();
        unsubscribeCallEnded();
        
        // Destruir API de Jitsi si existe
        if ((window as any).jitsiApi) {
          try {
            (window as any).jitsiApi.dispose();
          } catch (error) {
            console.error('Error al destruir API de Jitsi:', error);
          }
        }
      });
      
      console.log('Servicios de WebSocket y llamadas inicializados correctamente');
      
      // Cargar la API de Jitsi Meet desde CDN
      const script = document.createElement('script');
      script.src = 'https://meet.jit.si/external_api.js';
      script.async = true;
      document.body.appendChild(script);
    } catch (error) {
      console.error('Error al inicializar servicios:', error);
    }
  });
</script>
